FILE SYSTEM

I file system sono un modo per organizzare e memorizzare (in modo persistente) le informazioni. Offrono inoltre un'astrazione sui dispositivi di memorizzazione (Disco rigido, SSD, rete, RAM)
Le informazioni sono organizzate in file e directory. 
Esempi di file system: 
- FAT12 / FAT16: MS-DOS
- NTFS: Windows
- Ext4: Linux
- APFS: macOS/iOS

-> FILE

I file sono un meccanismo di astrazione: forniscono un metodo per salvare informazioni sul disco e leggerle in seguito. Ciò deve avvenire in modo da nascondere all’utente i dettagli di come e dove le informazioni siano memorizzate e di come funzioni effettivamente il disco.
I file vengono identificati tramite nomi, che possono variare in base al sistema operativo. Alcuni sistemi operativi limitano la lunghezza dei file (MS-DOS) mentre altri supportano nomi più lunghi. Inolte alcuni sistemi come UNIX distinguono tra maiuscole e minuscole (maria != MarIa), mentre sistemi come MS-DOS no (maria == MarIa)

Ciascuno file, generalmente è identificato oltre da un nome anche da una estesione, indicando generalmente una caratteristica specifica di un file. (.jpg per immagini, .c per codice sorgente in linguaggio C, etc...)
In alcuni sistemi come UNIX, le esetesioni sono puramente convenzionali e non richieste dal sistema operati. Un compilatore C, invece, potrebbe effettivamente richiedere l’estensione .c per i file da compilare, rifiutandosi di compilarli se non la presentano, ma al sistema operativo poco importa.
Altri sistemi come Windows, le estesioni hanno un significato specifico e sono associati a programmi specifici. Gli utenti (o i processi) possono registrare le estensioni nel sistema operativo e specificare per ognuna quale sia il programma che “possiede” quell’estensione. Quando un utente fa doppio clic sul nome di un file, il programma assegnato alla sua estensione viene lanciato con il file come parametro. Per esempio, con un doppio clic su file.docx si avvia Microsoft Word con file.docx come file iniziale su cui lavorare. Photoshop, invece, non aprirà file con estensione .docx .
{immagine}

I file possono essere strutturati in tanti modi diversi. Tre delle possibilità più comuni sono descritte nella figura sotto.

a. Sequenza Non Strutturata di Byte
    - i file sono visti dal sistema operativo come una serie non struttrata di byte. 
    - il significato dei dati è determinato dai programmi a livello utente, non dal sistema operativo.
    - questo approccio è addottato da sistemi come UNIX, Linux, macOS e Windows, offrendo massima flessibilità.

b. Sequenza Di Record Di Lunghezza Fissa
    - un file è una sequenza di record con una struttura interna definita e lunghezza fissa. 
    - il modello storico basato su schede perforate a 80 colonne in mainframe.
    - letture e scritture avvengono a unità di record, meno comune nei sistemi moderni ma era prevalente nei mainframe passati.

c. File Come Albero di Record
    - il file è organizzato come albero di record, con lunghezze variabili e un campo chiave in posizione fissa.
    - l' organizzazione consente ricerche rapide basate su chiavi specifici.
    - utilizzato principalmente in sistemi mainframe per elaborazioni dati di carattere commerciale (es. DBMS), diverso dalle sequenze non strutturate di UNIX e Windows

Molti sistemi operativi supportano diversi tipi di file. UNIX (e di nuovo, macOS e Linux) e Windows, per esempio, hanno file e directory normali. UNIX ha anche file speciali a caratteri o a blocchi.

- File e Directory Normali: Sono utilizzati in sistemi come UNIX e Windows. I file normali contengono informazioni utente e sono la forma più comune. Le directory sono file di sistema per mantenere la struttura del file system.
- File Speciali: A caratteri usati per modellate porte seriale di I/O come terminali e stampanti. A blocchi usati per modellare dischi.
- File Normali: File ASCII composti da righe di testo, visualizzabili e stampabili; variano nella terminazione delle righe. File Binari, non leggibili come testo, hanno una struttra interna conosciuta dai programmi che li utilizzano. Per esempio file eseguibili o archivi.

Nella figura sotto è mostrato la struttura interna di due file binari, eseguibile (a) e archivio (b)
a. File eseguibile - Componenti
    - Intestazione (Header): Contiene un 'numero magico' per identificare il file come eseguibile (e non eseguire file non "eseguibile"), dimensioni delle parti del file, indirizzo di esecuzione inziale (punto d'ingresso) e vari flag.
    - Testo e Dati: Parti effettive del programma, caricare e rilocare in memoria.
    - Tabella dei simboli: Utilizzata per il debug.

b. File di Archivio
    - Descrizione: Raccolta di procedure di libreria (moduli) compilate ma non collegate.
    - Intestazione dei Modelli: Indicano nome, data di creazione, codice di protezione e dimensione.
    - Carattere Binario: Stampare questi file produrrebbe caratteri incomprensibili.

{immagine}

Come avviene l'accesso ad un file?
- Nei primi sistemi operativi, c'era un solo metodo di accesso ai file, accesso sequenziale. In questi sistemi un processo poteva leggere tutti i byte o i record in ordine, a partire dal principio, ma non poteva saltarli né leggerli in ordine sparso. I file sequenziali potevano tuttavia essere riavvolti, in modo da poterli leggere tutte le volte che occorreva. 

- Successivamente con l'avvento dei dischi è stato introdotto l'accesso causale, che permette la lettura di byte o record in quasiasi ordine, senza seguire una sequenza. E' cruciale per applicazioni come i sistemi di database, dove è necessario accedere rapidamente a record specifici senza attraversare l'intero file.
Per specificare dove cominciare a leggere possono essere usati due metodi. Nel primo, ogni operazione read fornisce la posizione del file dalla quale iniziare a leggere. Nel secondo è fornita un’operazione speciale, seek, per impostare la posizione corrente. Dopo una seek il file può essere letto sequenzialmente dalla posizione appena definita come corrente. Quest’ultimo metodo è usato sia in UNIX sia in Windows.

Ogni file ha un nome e i propri dati. Tutti i sistemi operativi associano ulteriori informazioni a ciascun file, per esempio la data e l’ora in cui è stato modificato l’ultima volta e la dimensione. Chiameremo attributi (metadati) queste ulteriori voci del file. L’elenco degli attributi cambia in modo considerevole a seconda del sistema. 
{immagine}
Gli attributi dei file sono cruciali per: 
- la protezione, il controllo dell'accesso
- la gestione efficace dei file nei sistemi operativi

Quali operazioni si possono effettuare sui file?

1. Create: Creazione di un file senza dati.
2. Delete: Eliminazione di un file per liberare spazio sul disco, attraverso una specifica chiamata di sistema.
3. Open: Apertura di un file per consentire al sistema di caricare in memoria gli attributi e gli indirizzi del disco.
4. Close: Chiusura del file ala termine degli accessi per liberare spazio nelle tabelle interne.
